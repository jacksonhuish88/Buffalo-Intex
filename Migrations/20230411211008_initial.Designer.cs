// <auto-generated />
using System;
using Buffalo_Intex;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Buffalo_Intex.Migrations
{
    [DbContext(typeof(MummyDbContext))]
    [Migration("20230411211008_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.excelimporter$template_nr_mxseq", "'excelimporter$template_nr_mxseq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.system$filedocument_fileid_mxseq", "'system$filedocument_fileid_mxseq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.system$queuedtask_sequence_mxseq", "'system$queuedtask_sequence_mxseq', '', '1', '1', '', '', 'Int64', 'False'");

            modelBuilder.Entity("Buffalo_Intex.Analysis", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Analysisid")
                        .HasColumnName("analysisid")
                        .HasColumnType("integer");

                    b.Property<int?>("Analysistype")
                        .HasColumnName("analysistype")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Doneby")
                        .HasColumnName("doneby")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("analysis");
                });

            modelBuilder.Entity("Buffalo_Intex.AnalysisTextile", b =>
                {
                    b.Property<long>("MainAnalysisid")
                        .HasColumnName("main$analysisid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainTextileid")
                        .HasColumnName("main$textileid")
                        .HasColumnType("bigint");

                    b.HasKey("MainAnalysisid", "MainTextileid")
                        .HasName("main$analysis_textile_pkey");

                    b.HasIndex("MainTextileid", "MainAnalysisid")
                        .HasName("idx_main$analysis_textile_main$textile_main$analysis");

                    b.ToTable("analysis_textile");
                });

            modelBuilder.Entity("Buffalo_Intex.Artifactfagelgamousregister", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Coordinateset")
                        .HasColumnName("coordinateset")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("text");

                    b.Property<string>("Photographed")
                        .HasColumnName("photographed")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Registernum")
                        .HasColumnName("registernum")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("artifactfagelgamousregister");
                });

            modelBuilder.Entity("Buffalo_Intex.ArtifactfagelgamousregisterBurialmain", b =>
                {
                    b.Property<long>("MainArtifactfagelgamousregisterid")
                        .HasColumnName("main$artifactfagelgamousregisterid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainBurialmainid")
                        .HasColumnName("main$burialmainid")
                        .HasColumnType("bigint");

                    b.HasKey("MainArtifactfagelgamousregisterid", "MainBurialmainid")
                        .HasName("main$artifactfagelgamousregister_burialmain_pkey");

                    b.HasIndex("MainBurialmainid", "MainArtifactfagelgamousregisterid")
                        .HasName("idx_main$artifactfagelgamousregister_burialmain");

                    b.ToTable("artifactfagelgamousregister_burialmain");
                });

            modelBuilder.Entity("Buffalo_Intex.Artifactkomaushimregister", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Currentlocation")
                        .HasColumnName("currentlocation")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Date")
                        .HasColumnName("date")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Dimensions")
                        .HasColumnName("dimensions")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Entrydate")
                        .HasColumnName("entrydate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Excavatornum")
                        .HasColumnName("excavatornum")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Finder")
                        .HasColumnName("finder")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Material")
                        .HasColumnName("material")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Number")
                        .HasColumnName("number")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Photos")
                        .HasColumnName("photos")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Provenance")
                        .HasColumnName("provenance")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Qualityphotos")
                        .HasColumnName("qualityphotos")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Rehousedto")
                        .HasColumnName("rehousedto")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Remarks")
                        .HasColumnName("remarks")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("artifactkomaushimregister");
                });

            modelBuilder.Entity("Buffalo_Intex.ArtifactkomaushimregisterBurialmain", b =>
                {
                    b.Property<long>("MainArtifactkomaushimregisterid")
                        .HasColumnName("main$artifactkomaushimregisterid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainBurialmainid")
                        .HasColumnName("main$burialmainid")
                        .HasColumnType("bigint");

                    b.HasKey("MainArtifactkomaushimregisterid", "MainBurialmainid")
                        .HasName("main$artifactqumoshimregistrar_burialmain_pkey");

                    b.HasIndex("MainBurialmainid", "MainArtifactkomaushimregisterid")
                        .HasName("idx_main$artifactkomaushimregister_burialmain");

                    b.ToTable("artifactkomaushimregister_burialmain");
                });

            modelBuilder.Entity("Buffalo_Intex.Biological", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Bagnumber")
                        .HasColumnName("bagnumber")
                        .HasColumnType("integer");

                    b.Property<int?>("Clusternumber")
                        .HasColumnName("clusternumber")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Initials")
                        .HasColumnName("initials")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Previouslysampled")
                        .HasColumnName("previouslysampled")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("Racknumber")
                        .HasColumnName("racknumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("biological");
                });

            modelBuilder.Entity("Buffalo_Intex.BiologicalC14", b =>
                {
                    b.Property<long>("MainBiologicalid")
                        .HasColumnName("main$biologicalid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainC14id")
                        .HasColumnName("main$c14id")
                        .HasColumnType("bigint");

                    b.HasKey("MainBiologicalid", "MainC14id")
                        .HasName("main$biological_c14_pkey");

                    b.HasIndex("MainC14id", "MainBiologicalid")
                        .HasName("idx_main$biological_c14_main$c14_main$biological");

                    b.ToTable("biological_c14");
                });

            modelBuilder.Entity("Buffalo_Intex.Bodyanalysischart", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("CariesPeriodontalDisease")
                        .HasColumnName("caries_periodontal_disease")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("Estimatestature")
                        .HasColumnName("estimatestature")
                        .HasColumnType("integer");

                    b.Property<string>("Femur")
                        .HasColumnName("femur")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Femurheaddiameter")
                        .HasColumnName("femurheaddiameter")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("Femurlength")
                        .HasColumnName("femurlength")
                        .HasColumnType("integer");

                    b.Property<string>("Gonion")
                        .HasColumnName("gonion")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Humerus")
                        .HasColumnName("humerus")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Humerusheaddiameter")
                        .HasColumnName("humerusheaddiameter")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("Humeruslength")
                        .HasColumnName("humeruslength")
                        .HasColumnType("integer");

                    b.Property<string>("Lambdoidsuture")
                        .HasColumnName("lambdoidsuture")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("MedicalIpRamus")
                        .HasColumnName("medical_ip_ramus")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Nuchalcrest")
                        .HasColumnName("nuchalcrest")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Observations")
                        .HasColumnName("observations")
                        .HasColumnType("character varying");

                    b.Property<string>("Orbitedge")
                        .HasColumnName("orbitedge")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Osteophytosis")
                        .HasColumnName("osteophytosis")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool?>("Parietalblossing")
                        .HasColumnName("parietalblossing")
                        .HasColumnType("boolean");

                    b.Property<int?>("Perservationindex")
                        .HasColumnName("perservationindex")
                        .HasColumnType("integer");

                    b.Property<bool?>("Robust")
                        .HasColumnName("robust")
                        .HasColumnType("boolean");

                    b.Property<string>("Sciaticnotch")
                        .HasColumnName("sciaticnotch")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Sphenooccipitalsynchondrosis")
                        .HasColumnName("sphenooccipitalsynchondrosis")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Squamossuture")
                        .HasColumnName("squamossuture")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Subpubicangle")
                        .HasColumnName("subpubicangle")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Supraorbitalridges")
                        .HasColumnName("supraorbitalridges")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("Toothattrition")
                        .HasColumnName("toothattrition")
                        .HasColumnType("integer");

                    b.Property<int?>("Tootheruptionageestimation")
                        .HasColumnName("tootheruptionageestimation")
                        .HasColumnType("integer");

                    b.Property<bool?>("Ventralarc")
                        .HasColumnName("ventralarc")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("bodyanalysischart");
                });

            modelBuilder.Entity("Buffalo_Intex.Books", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Author")
                        .HasColumnName("author")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying");

                    b.Property<string>("Link")
                        .HasColumnName("link")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("books");
                });

            modelBuilder.Entity("Buffalo_Intex.Burialmain", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Adultsubadult")
                        .HasColumnName("adultsubadult")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Ageatdeath")
                        .HasColumnName("ageatdeath")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Area")
                        .HasColumnName("area")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("Burialid")
                        .HasColumnName("burialid")
                        .HasColumnType("bigint");

                    b.Property<string>("Burialmaterials")
                        .HasColumnName("burialmaterials")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Burialnumber")
                        .HasColumnName("burialnumber")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Clusternumber")
                        .HasColumnName("clusternumber")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Dataexpertinitials")
                        .HasColumnName("dataexpertinitials")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Dateofexcavation")
                        .HasColumnName("dateofexcavation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Depth")
                        .HasColumnName("depth")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Eastwest")
                        .HasColumnName("eastwest")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Excavationrecorder")
                        .HasColumnName("excavationrecorder")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Facebundles")
                        .HasColumnName("facebundles")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Fieldbookexcavationyear")
                        .HasColumnName("fieldbookexcavationyear")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Fieldbookpage")
                        .HasColumnName("fieldbookpage")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Goods")
                        .HasColumnName("goods")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Hair")
                        .HasColumnName("hair")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Haircolor")
                        .HasColumnName("haircolor")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Headdirection")
                        .HasColumnName("headdirection")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Length")
                        .HasColumnName("length")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Northsouth")
                        .HasColumnName("northsouth")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Photos")
                        .HasColumnName("photos")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Preservation")
                        .HasColumnName("preservation")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Samplescollected")
                        .HasColumnName("samplescollected")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Sex")
                        .HasColumnName("sex")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Shaftnumber")
                        .HasColumnName("shaftnumber")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Southtofeet")
                        .HasColumnName("southtofeet")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Southtohead")
                        .HasColumnName("southtohead")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Squareeastwest")
                        .HasColumnName("squareeastwest")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Squarenorthsouth")
                        .HasColumnName("squarenorthsouth")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Westtofeet")
                        .HasColumnName("westtofeet")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Westtohead")
                        .HasColumnName("westtohead")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Wrapping")
                        .HasColumnName("wrapping")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("burialmain");
                });

            modelBuilder.Entity("Buffalo_Intex.BurialmainBiological", b =>
                {
                    b.Property<long>("MainBurialmainid")
                        .HasColumnName("main$burialmainid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainBiologicalid")
                        .HasColumnName("main$biologicalid")
                        .HasColumnType("bigint");

                    b.HasKey("MainBurialmainid", "MainBiologicalid")
                        .HasName("main$burialmain_biological_pkey");

                    b.HasIndex("MainBiologicalid", "MainBurialmainid")
                        .HasName("idx_main$burialmain_biological_main$biological_main$burialmain");

                    b.ToTable("burialmain_biological");
                });

            modelBuilder.Entity("Buffalo_Intex.BurialmainBodyanalysischart", b =>
                {
                    b.Property<long>("MainBurialmainid")
                        .HasColumnName("main$burialmainid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainBodyanalysischartid")
                        .HasColumnName("main$bodyanalysischartid")
                        .HasColumnType("bigint");

                    b.HasKey("MainBurialmainid", "MainBodyanalysischartid")
                        .HasName("main$burialmain_bodyanalysischart_pkey");

                    b.HasIndex("MainBodyanalysischartid", "MainBurialmainid")
                        .HasName("idx_main$burialmain_bodyanalysischart");

                    b.ToTable("burialmain_bodyanalysischart");
                });

            modelBuilder.Entity("Buffalo_Intex.BurialmainCranium", b =>
                {
                    b.Property<long>("MainBurialmainid")
                        .HasColumnName("main$burialmainid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainCraniumid")
                        .HasColumnName("main$craniumid")
                        .HasColumnType("bigint");

                    b.HasKey("MainBurialmainid", "MainCraniumid")
                        .HasName("main$burialmain_cranium_pkey");

                    b.HasIndex("MainCraniumid", "MainBurialmainid")
                        .HasName("idx_main$burialmain_cranium_main$cranium_main$burialmain");

                    b.ToTable("burialmain_cranium");
                });

            modelBuilder.Entity("Buffalo_Intex.BurialmainTextile", b =>
                {
                    b.Property<long>("MainBurialmainid")
                        .HasColumnName("main$burialmainid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainTextileid")
                        .HasColumnName("main$textileid")
                        .HasColumnType("bigint");

                    b.HasKey("MainBurialmainid", "MainTextileid")
                        .HasName("main$burialmain_textile_pkey");

                    b.HasIndex("MainTextileid", "MainBurialmainid")
                        .HasName("idx_main$burialmain_textile_main$textile_main$burialmain");

                    b.ToTable("burialmain_textile");
                });

            modelBuilder.Entity("Buffalo_Intex.C14", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Agebp")
                        .HasColumnName("agebp")
                        .HasColumnType("integer");

                    b.Property<string>("C14lab")
                        .HasColumnName("c14lab")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("Calendardate")
                        .HasColumnName("calendardate")
                        .HasColumnType("integer");

                    b.Property<int?>("Calibrateddateavg")
                        .HasColumnName("calibrateddateavg")
                        .HasColumnType("integer");

                    b.Property<int?>("Calibrateddatemax")
                        .HasColumnName("calibrateddatemax")
                        .HasColumnType("integer");

                    b.Property<int?>("Calibrateddatemin")
                        .HasColumnName("calibrateddatemin")
                        .HasColumnType("integer");

                    b.Property<int?>("Calibratedspan")
                        .HasColumnName("calibratedspan")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Foci")
                        .HasColumnName("foci")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Questions")
                        .HasColumnName("questions")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<int?>("Rack")
                        .HasColumnName("rack")
                        .HasColumnType("integer");

                    b.Property<int?>("Size")
                        .HasColumnName("size")
                        .HasColumnType("integer");

                    b.Property<int?>("Tubenumber")
                        .HasColumnName("tubenumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("c14");
                });

            modelBuilder.Entity("Buffalo_Intex.Color", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Colorid")
                        .HasColumnName("colorid")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("color");
                });

            modelBuilder.Entity("Buffalo_Intex.ColorTextile", b =>
                {
                    b.Property<long>("MainColorid")
                        .HasColumnName("main$colorid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainTextileid")
                        .HasColumnName("main$textileid")
                        .HasColumnType("bigint");

                    b.HasKey("MainColorid", "MainTextileid")
                        .HasName("main$color_textile_pkey");

                    b.HasIndex("MainTextileid", "MainColorid")
                        .HasName("idx_main$color_textile_main$textile_main$color");

                    b.ToTable("color_textile");
                });

            modelBuilder.Entity("Buffalo_Intex.Cranium", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("AlphaCore")
                        .HasColumnName("alpha_core")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("BasionBregmaHeight")
                        .HasColumnName("basion_bregma_height")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("BasionNasion")
                        .HasColumnName("basion_nasion")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("BasionProsthionLength")
                        .HasColumnName("basion_prosthion_length")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("BizygomaticDiameter")
                        .HasColumnName("bizygomatic_diameter")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("InterobitalBreadth")
                        .HasColumnName("interobital_breadth")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("InterorbitalBreadth")
                        .HasColumnName("interorbital_breadth")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("InterorbitalSubtense")
                        .HasColumnName("interorbital_subtense")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("MaxNasalBreadth")
                        .HasColumnName("max_nasal_breadth")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("Maxcraniumbreadth")
                        .HasColumnName("maxcraniumbreadth")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("Maxcraniumlength")
                        .HasColumnName("maxcraniumlength")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("MidOrbitalBreadth")
                        .HasColumnName("mid_orbital_breadth")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("MidOrbitalSubtense")
                        .HasColumnName("mid_orbital_subtense")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("NasionProsthionUpper")
                        .HasColumnName("nasion_prosthion_upper")
                        .HasColumnType("numeric(28,8)");

                    b.Property<decimal?>("NasoAlphaSubtense")
                        .HasColumnName("naso_alpha__subtense")
                        .HasColumnType("numeric(28,8)");

                    b.HasKey("Id");

                    b.ToTable("cranium");
                });

            modelBuilder.Entity("Buffalo_Intex.Decoration", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Decorationid")
                        .HasColumnName("decorationid")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("decoration");
                });

            modelBuilder.Entity("Buffalo_Intex.DecorationTextile", b =>
                {
                    b.Property<long>("MainDecorationid")
                        .HasColumnName("main$decorationid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainTextileid")
                        .HasColumnName("main$textileid")
                        .HasColumnType("bigint");

                    b.HasKey("MainDecorationid", "MainTextileid")
                        .HasName("main$decoration_textile_pkey");

                    b.HasIndex("MainTextileid", "MainDecorationid")
                        .HasName("idx_main$decoration_textile_main$textile_main$decoration");

                    b.ToTable("decoration_textile");
                });

            modelBuilder.Entity("Buffalo_Intex.Dimension", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Dimensionid")
                        .HasColumnName("dimensionid")
                        .HasColumnType("integer");

                    b.Property<string>("Dimensiontype")
                        .HasColumnName("dimensiontype")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("dimension");
                });

            modelBuilder.Entity("Buffalo_Intex.DimensionTextile", b =>
                {
                    b.Property<long>("MainDimensionid")
                        .HasColumnName("main$dimensionid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainTextileid")
                        .HasColumnName("main$textileid")
                        .HasColumnType("bigint");

                    b.HasKey("MainDimensionid", "MainTextileid")
                        .HasName("main$dimension_textile_pkey");

                    b.HasIndex("MainTextileid", "MainDimensionid")
                        .HasName("idx_main$dimension_textile_main$textile_main$dimension");

                    b.ToTable("dimension_textile");
                });

            modelBuilder.Entity("Buffalo_Intex.Newsarticle", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Author")
                        .HasColumnName("author")
                        .HasColumnType("character varying");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("character varying");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasColumnType("character varying");

                    b.Property<string>("Urltoimage")
                        .HasColumnName("urltoimage")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("newsarticle");
                });

            modelBuilder.Entity("Buffalo_Intex.Photodata", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Filename")
                        .HasColumnName("filename")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("Photodataid")
                        .HasColumnName("photodataid")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("photodata");
                });

            modelBuilder.Entity("Buffalo_Intex.PhotodataTextile", b =>
                {
                    b.Property<long>("MainPhotodataid")
                        .HasColumnName("main$photodataid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainTextileid")
                        .HasColumnName("main$textileid")
                        .HasColumnType("bigint");

                    b.HasKey("MainPhotodataid", "MainTextileid")
                        .HasName("main$photodata_textile_pkey");

                    b.HasIndex("MainTextileid", "MainPhotodataid")
                        .HasName("idx_main$photodata_textile_main$textile_main$photodata");

                    b.ToTable("photodata_textile");
                });

            modelBuilder.Entity("Buffalo_Intex.Photoform", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Area")
                        .HasColumnName("area")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Burialnumber")
                        .HasColumnName("burialnumber")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Eastwest")
                        .HasColumnName("eastwest")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Filename")
                        .HasColumnName("filename")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Northsouth")
                        .HasColumnName("northsouth")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("Photodate")
                        .HasColumnName("photodate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Photographer")
                        .HasColumnName("photographer")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Squareeastwest")
                        .HasColumnName("squareeastwest")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Squarenorthsouth")
                        .HasColumnName("squarenorthsouth")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Tableassociation")
                        .HasColumnName("tableassociation")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("photoform");
                });

            modelBuilder.Entity("Buffalo_Intex.Structure", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Structureid")
                        .HasColumnName("structureid")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("structure");
                });

            modelBuilder.Entity("Buffalo_Intex.StructureTextile", b =>
                {
                    b.Property<long>("MainStructureid")
                        .HasColumnName("main$structureid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainTextileid")
                        .HasColumnName("main$textileid")
                        .HasColumnType("bigint");

                    b.HasKey("MainStructureid", "MainTextileid")
                        .HasName("main$structure_textile_pkey");

                    b.HasIndex("MainTextileid", "MainStructureid")
                        .HasName("idx_main$structure_textile_main$textile_main$structure");

                    b.ToTable("structure_textile");
                });

            modelBuilder.Entity("Buffalo_Intex.Teammember", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Bio")
                        .HasColumnName("bio")
                        .HasColumnType("character varying");

                    b.Property<string>("Membername")
                        .HasColumnName("membername")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("teammember");
                });

            modelBuilder.Entity("Buffalo_Intex.Textile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Burialnumber")
                        .HasColumnName("burialnumber")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying");

                    b.Property<string>("Direction")
                        .HasColumnName("direction")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Estimatedperiod")
                        .HasColumnName("estimatedperiod")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Locale")
                        .HasColumnName("locale")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Photographeddate")
                        .HasColumnName("photographeddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Sampledate")
                        .HasColumnName("sampledate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Textileid")
                        .HasColumnName("textileid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("textile");
                });

            modelBuilder.Entity("Buffalo_Intex.Textilefunction", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Textilefunctionid")
                        .HasColumnName("textilefunctionid")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("textilefunction");
                });

            modelBuilder.Entity("Buffalo_Intex.TextilefunctionTextile", b =>
                {
                    b.Property<long>("MainTextilefunctionid")
                        .HasColumnName("main$textilefunctionid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainTextileid")
                        .HasColumnName("main$textileid")
                        .HasColumnType("bigint");

                    b.HasKey("MainTextilefunctionid", "MainTextileid")
                        .HasName("main$textilefunction_textile_pkey");

                    b.HasIndex("MainTextileid", "MainTextilefunctionid")
                        .HasName("idx_main$textilefunction_textile");

                    b.ToTable("textilefunction_textile");
                });

            modelBuilder.Entity("Buffalo_Intex.Yarnmanipulation", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Angle")
                        .HasColumnName("angle")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Component")
                        .HasColumnName("component")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Count")
                        .HasColumnName("count")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Direction")
                        .HasColumnName("direction")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Manipulation")
                        .HasColumnName("manipulation")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Material")
                        .HasColumnName("material")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Ply")
                        .HasColumnName("ply")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Thickness")
                        .HasColumnName("thickness")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("Yarnmanipulationid")
                        .HasColumnName("yarnmanipulationid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("yarnmanipulation");
                });

            modelBuilder.Entity("Buffalo_Intex.YarnmanipulationTextile", b =>
                {
                    b.Property<long>("MainYarnmanipulationid")
                        .HasColumnName("main$yarnmanipulationid")
                        .HasColumnType("bigint");

                    b.Property<long>("MainTextileid")
                        .HasColumnName("main$textileid")
                        .HasColumnType("bigint");

                    b.HasKey("MainYarnmanipulationid", "MainTextileid")
                        .HasName("main$yarnmanipulation_textile_pkey");

                    b.HasIndex("MainTextileid", "MainYarnmanipulationid")
                        .HasName("idx_main$yarnmanipulation_textile");

                    b.ToTable("yarnmanipulation_textile");
                });
#pragma warning restore 612, 618
        }
    }
}
